use aoc::read_lines;

#[allow(dead_code)]
struct Solution {
    lines: Vec<String>,
    max_color_count_list: Vec<CubeCount>
}

struct CubeCount {
    count: u32,
    color: String
}

impl CubeCount {
    fn new(count: u32, color: String) -> Self {
        return Self {count, color};
    }
}

#[allow(dead_code)]
struct Game {
    game_id: u32,
    cube_combinations: Vec<Vec<CubeCount>>,
}

impl Game {
    fn new(game_id: u32, cube_combinations: Vec<Vec<CubeCount>>) -> Self {
        return Self {game_id, cube_combinations};
    }
}


impl Solution {
    fn new(lines: Vec<String>) -> Self {
        let max_color_count_list: Vec<CubeCount> = vec![
            CubeCount::new(12, "red".to_string()),
            CubeCount::new(13, "green".to_string()),
            CubeCount::new(14, "blue".to_string()),
        ];
        return Self {lines, max_color_count_list};
    }

    fn part1(&self) -> u32 {
        let mut sum: u32 = 0;
        for (i, line) in self.lines.iter().enumerate() {
            let game: Game = self.parse_line_p1(i as u32, line.to_string());
            for list in game.cube_combinations.iter() {
                for cube_count in list.iter() {
                    println!("{}: [{} | {}]", i, cube_count.count, cube_count.color);
                    if cube_count.color == "red" && cube_count.count > 12 {
                        break;
                    }
                    else if cube_count.color == "green" && cube_count.count > 13 {
                        break;

                    }
                    else if cube_count.color == "blue" && cube_count.count > 14 {
                        break;
                    }
                    else {
                        continue;
                    }
                }
            }
            sum += i as u32 + 1;
        }

        return sum;
    }

    fn part2(&self) -> u32 {
        return 0;
    }

    fn parse_line_p1(&self, game_id: u32, line: String) -> Game {
        let Some(idx) = line.find(':') else { panic!("Error in parse_line_p1")};
        let new_str: String = line.chars().skip(idx + 1).collect();
        let sub_games: Vec<&str> = new_str
            .split(';')
            .collect();
        let mut game_list: Vec<Vec<CubeCount>> = vec![];
        for sub_game in sub_games.iter() {
            let sub_game_str: Vec<&str> = sub_game.split(',').collect();
            let mut sub_game_list: Vec<CubeCount> = vec![];
            for sub_game_str_str in sub_game_str.iter() {
                let s: Vec<&str> = sub_game_str_str.split_whitespace().collect();
                let Some(num) = s[0].chars().nth(0).unwrap().to_digit(10) else {
                    panic!("Couldn't parse int");
                };
                let color = s[1].to_string();
                let cube_count = CubeCount::new(num, color);
                sub_game_list.push(cube_count);
            }
            game_list.push(sub_game_list);
        }
        return Game::new(game_id, game_list);
    }

    fn parse_line_p2(&self, line: String) -> u32 {
        return 0;
    }
}

fn main() {
    //let lines = read_lines("data/input/day02.txt");
    let lines = read_lines("data/example/day02/day02_part1.in");
    let solver: Solution = Solution::new(lines.unwrap());

    println!("Part 1: {}", solver.part1());
    println!("Part 2: {}", solver.part2());
}

#[cfg(test)]
mod tests {
    use aoc::read_example_answer;
    use crate::*;

    #[test]
    fn test_part1() {
        let lines = read_lines("data/example/day02/day02_part1.in");
        let solver: Solution = Solution::new(lines.unwrap());
        let result = solver.part1();
        let answer = read_example_answer("data/example/day02/day02_part1.out");
        assert_eq!(result, answer);
    }

    #[test]
    fn test_part2() {
        //let lines = read_lines("data/example/day01/day01_example2.txt");
        //let solver: Solution = Solution::new(lines.unwrap());
        //let result = solver.part2();
        //let answer = read_example_answer("data/example/day01/day01_answer2.txt");
        //assert_eq!(result, answer);
        todo!();
    }
}
